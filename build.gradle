buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.1.0-beta4'
    }
}
plugins {
    id 'java'
    id "application"
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id 'edu.sc.seis.launch4j' version '2.5.0'
}



defaultTasks("clean","release")

java {
    // very important ByteBuffer does not have flip in java 1.8
    // this set the javac --release flag
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

repositories {
    mavenCentral()
    google()
    maven {
        url "https://jitpack.io"
    }
    maven {
        url "https://maven.latticg.com/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

import org.apache.tools.ant.filters.ReplaceTokens
import proguard.gradle.ProGuardTask

// this task replace the @VERSION@ token with the current project.version
task processSource(type: Sync) {
    from sourceSets.main.java
    inputs.property 'version', version
    filter(ReplaceTokens, tokens: [VERSION: version])
    into "$buildDir/src"
}

compileJava {
    source = processSource.outputs
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:deprecation', '-Xlint:unchecked']
    options.fork = true
}

run {
    args "--no-update"
}

dependencies {
    implementation('com.github.KaptainWutax:MathUtils:5531c4a87b0f1bb85d1dab2bdd18ce375400626a') { transitive = false }
    implementation('com.github.KaptainWutax:SeedUtils:b6a383113ce5d8d09a59e91b28ff064fb97c0709') { transitive = false }
    implementation('com.github.KaptainWutax:MCUtils:1bc39b7c89498c8a045c6944f18465238f9bb4cc') { transitive = false }
    implementation('com.github.KaptainWutax:NoiseUtils:2cf64e1d2e7e674fbf5b7247f16e8dc56ae2a31c') { transitive = false }

    implementation('com.github.KaptainWutax:BiomeUtils:b2065a0281342f269af31da9ef7349ffdc337534') { transitive = false }
    implementation('com.github.KaptainWutax:TerrainUtils:605c46b94a5126df55bd347b82f277af443909c9') { transitive = false }
    implementation('com.github.KaptainWutax:FeatureUtils:53317090d53201795b81e3be5b0fa52fe75debae') { transitive = false }

    testImplementation('com.github.KaptainWutax:ChunkRandomReversal:6b76fb5cf2cd438de56e6a46cea2a83985831834') { transitive = false }
    implementation('com.seedfinding:latticg:1.05')

    implementation('com.google.code.gson:gson:2.8.6')
    implementation('com.formdev:flatlaf:0.38')
    implementation('org.swinglabs.swingx:swingx-core:1.6.5-1')
    implementation('org.pushing-pixels:radiance-trident:3.5.1')
    implementation('one.util:streamex:0.7.3')
    implementation('com.vdurmont:semver4j:3.1.0')
    // JOML
    implementation "org.joml:joml:1.10.1"
    // LWJGL core
    implementation "org.lwjgl:lwjgl:${lwjglVersion}"
    // LWJGL natives
    runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-windows"
    runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-linux"
    runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-macos"
    // OPENGL
    implementation "org.lwjgl:lwjgl-opengl:${lwjglVersion}"
    // OPENGL NATIVES
    runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-macos"
    // GLFW
    implementation "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
    // GLFW NATIVES
    runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-macos"
    // STB
    implementation "org.lwjgl:lwjgl-stb:${lwjglVersion}"
    // STB NATIVES
    runtimeOnly "org.lwjgl:lwjgl-stb:${lwjglVersion}:natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-stb:${lwjglVersion}:natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-stb:${lwjglVersion}:natives-macos"
}

application {
    mainClass.set("kaptainwutax.minemap.MineMap")
}

shadowJar {
    // this needs to be removed once https://github.com/johnrengelman/shadow/issues/663 is solved
    archiveFileName = "${project.name}-${project.version}.jar"
}

launch4j {
    outfile = "${project.name}-${project.version}.exe"
    icon = "${projectDir}/icon.ico"
    outputDir = "libs"
    supportUrl = "https://github.com/hube12/MineMap/issues"
    jvmOptions = ["-Xms1G", "-Xmx8G"]
    initialHeapPercent = 5
    maxHeapPercent = 80
    jarTask = project.tasks.shadowJar
    productName = "MineMap"
    fileDescription = "A lightning fast map viewer for Minecraft."
    copyConfigurable = [] // don't copy lib
    libraryDir= "ignore_libs"
    jreMaxVersion=JavaVersion.VERSION_HIGHER
    jreMinVersion=JavaVersion.VERSION_1_8
    // this is a dirty fix to use JAVA_HOME
    bundledJrePath ="%JAVA_HOME%;%PATH%"
}

task("release"){
    dependsOn(clean)
    dependsOn(shadowJar)
    dependsOn(createExe)
}


task proguard(type: ProGuardTask) {

    // You should probably import a more compact ProGuard-style configuration
    // file for all static settings, but we're specifying them all here, for
    // the sake of the example.
    //configuration 'configuration.pro'

    verbose

    // Specify the input jars, output jars, and library jars.

    injars  "build/libs/${project.name}-${project.version}.jar"
    outjars 'out.jar'

    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.desktop.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.logging.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.sql.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.management.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.datatransfer.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.prefs.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.naming.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        //libraryjars "${System.getProperty('java.home')}/jmods/....."
    }

    //libraryjars 'junit.jar'
    //libraryjars 'servlet.jar'
    //libraryjars 'jai_core.jar'
    //...

    // Save the obfuscation mapping to a file, so you can de-obfuscate any stack
    // traces later on. Keep a fixed source file attribute and all line number
    // tables to get line numbers in the stack traces.
    // You can comment this out if you're not interested in stack traces.

    printmapping 'out.map'
    renamesourcefileattribute 'SourceFile'
    keepattributes 'SourceFile,LineNumberTable'

    // Preserve all annotations.

    keepattributes '*Annotation*'

    // You can print out the seeds that are matching the keep options below.

    //printseeds 'out.seeds'

    // Preserve all public applications.

    keepclasseswithmembers 'public class * { \
        public static void main(java.lang.String[]); \
    }'

    // Preserve all native method names and the names of their classes.

    keepclasseswithmembernames includedescriptorclasses: true, 'class * { \
        native <methods>; \
    }'

    // Preserve the special static methods that are required in all enumeration
    // classes.

    keepclassmembers allowoptimization: true, 'enum * { \
        public static **[] values(); \
        public static ** valueOf(java.lang.String); \
    }'

    // Explicitly preserve all serialization members. The Serializable interface
    // is only a marker interface, so it wouldn't save them.
    // You can comment this out if your application doesn't use serialization.
    // If your code contains serializable classes that have to be backward
    // compatible, please refer to the manual.

    keepclassmembers 'class * implements java.io.Serializable { \
        static final long serialVersionUID; \
        static final java.io.ObjectStreamField[] serialPersistentFields; \
        private void writeObject(java.io.ObjectOutputStream); \
        private void readObject(java.io.ObjectInputStream); \
        java.lang.Object writeReplace(); \
        java.lang.Object readResolve(); \
    }'

    // Your application may contain more items that need to be preserved;
    // typically classes that are dynamically created using Class.forName:
    keep 'class org.jetbrains.annotations.** { *; }'
    dontwarn 'org.jetbrains.annotations.**'
    dontwarn "sun.misc.Unsafe"
    dontwarn "javax.annotation.**"
    dontwarn "org.lwjgl.vulkan.**"
    // keep 'public class com.example.MyClass'
    // keep 'public interface com.example.MyInterface'
    // keep 'public class * implements com.example.MyInterface'
}
